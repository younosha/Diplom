const { Router } = require('express');
const jwt = require('jsonwebtoken');
const router = Router();
const pool = require('../db');
const nodemailer = require('nodemailer');
const jwtObjGenerator = require('../utils/jwtObjGenerator');

// family/create-family
// –°–æ–∑–¥–∞–µ–º –∏ –ø—Ä–∏–≥–ª–∞—à–∞–µ–º –≤ —Å–µ–º—å—é
router.post(`/create-family`, async (req, res) => {
  try {
    const sentToken = req.body.token;
    const userId = jwt.decode(sentToken);
    // –ò—Å–ø–æ–ª—å–∑—É—è —Ç–æ–∫–µ–Ω,–Ω–∞—Ö–æ–¥–∏–º id –∏ name –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await pool.query(
      `SELECT id FROM users WHERE id=${userId.user.id}`
    );
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º  Id –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    const userIdCheck = user.rows[0].id;
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º,—Å–æ–∑–¥–∞–≤–∞–ª –ª–∏ user —Å–µ–º—å—é
    const checkUser = await pool.query(`SELECT id FROM family WHERE id=$1`, [
      userIdCheck,
    ]);

    if (checkUser.rows.length !== 0) {
      return res
        .status(401)
        .json({ message: '–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–æ–∑–¥–∞–≤–∞–ª —Å–µ–º—å—é' });
    }

    // –°–æ–∑–¥–∞–µ–º —Å–µ–º—å—é
    const family = await pool.query(`INSERT INTO family (id)  VALUES($1)`, [
      userIdCheck,
    ]);
    console.log(family)

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑—É family_users,–≥–¥–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–ª–µ–Ω–∞—Ö —Å–µ–º–µ–π
    // –ë–µ—Ä–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Å–µ–º—å–∏ –∏ –µ–µ —Å–æ–∑–¥–∞—Ç–µ–ª—è
    const family_id = await pool.query(
      `SELECT id,family_id FROM family WHERE id=$1`,
      [userIdCheck]
    );

    const familyID = family_id.rows[0].family_id; // —Ö—Ä–∞–Ω–∏—Ç ID —Å–µ–º—å–∏
    const userID = family_id.rows[0].id; // —Ö—Ä–∞–Ω–∏—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ family_users,–≥–¥–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–ª–µ–Ω–∞—Ö —Å–µ–º–µ–π
    const family_users = await pool.query(
      `INSERT INTO family_users (id,family_id) VALUES ($1,$2)`,
      [userID, familyID]
    );

    console.log(
      `–°–µ–º—å—è —Å–æ–∑–¥–∞–Ω–∞:${(family, family_id)}, –µ–µ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å:${family_users}`
    );
    console.log(family_users);

    res.status(200).json({ message: `ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Å–µ–º—å–∏:${familyID}` });
  } catch (e) {
    console.log(e);
    res.status(500).json({ message: '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞,–ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ ' });
  }
});

// family/invite
// –°–æ–∑–¥–∞–µ–º –∏ –ø—Ä–∏–≥–ª–∞—à–∞–µ–º –≤ —Å–µ–º—å—é
router.post(`/invite`, async (req, res) => {
  try {
    const sentToken = req.body.token;
    const userId = jwt.decode(sentToken);
    // –ò—Å–ø–æ–ª—å–∑—É—è —Ç–æ–∫–µ–Ω,–Ω–∞—Ö–æ–¥–∏–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,–∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
    const thisUser = await pool.query(
      `SELECT id FROM users WHERE id=${userId.user.id}`
    );
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º  Id –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    const userIdCheck = thisUser.rows[0].id;
    // –ù–∞—Ö–æ–¥–∏–º ID –µ–≥–æ —Å–µ–º—å–∏
    const family = await pool.query(
      `SELECT family_id FROM family_users WHERE id=$1`,
      [userIdCheck]
    );
    const familyIdCheck = family.rows[0].family_id; // –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å ID —Å–µ–º—å–∏
    const family_token = jwtObjGenerator(familyIdCheck); // —Å–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö—Ä–∞–Ω–∏—Ç—Å—è id —Å–µ–º—å–∏

    //–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Ñ—Ä–æ–Ω—Ç–∞
    const { email } = req.body;
    // –ü—Ä–æ–≤—Ä–µ—è–µ–º –≤ –±–∞–∑–µ,–µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π —ç–º—ç–∏–ª
    const user = await pool.query('SELECT * FROM users WHERE email =$1', [
      email,
    ]);
    if (user.rows.length === 0) {
      return res
        .status(401)
        .json({ message: '–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
    }
    // –ù–∞—Ö–æ–¥–∏–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,–∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–∞—é—Ç
    const invitedUser = await pool.query(
      'SELECT id FROM users WHERE email =$1',
      [email]
    );
    // –ó–∞–ø–∏—Å—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–∞—é—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    const invitedUserId = invitedUser.rows[0].id;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≥–ª–∞—à–∞–ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —ç—Ç—É —Å–µ–º—å—é –∏–ª–∏ –Ω–µ—Ç –∏ —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –æ–Ω –≤ —Å–µ–º—å–µ
    const checkUserInvite = await pool.query(
      `SELECT id,family_id,family_token FROM family_users WHERE id=$1`,
      [invitedUserId]
    );

    // –°–æ—Å—Ç–æ–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–µ–º—å–µ –∏–ª–∏ –Ω–µ—Ç
    const hasToken = checkUserInvite.rows.some(
      (row) => row.family_token === null
    );

    if (hasToken) {
      return res
        .status(401)
        .json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ —Å–µ–º—å–µ' });
    }
    // –ö–∏–¥–∞–ª–∏ –µ–º—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∏–ª–∏ –Ω–µ—Ç
    const invited = checkUserInvite.rows.find(
      (row) => row.family_id === familyIdCheck
    );
    console.log(invited);
    if (invited) {
      // –ï—Å–ª–∏ –∫–∏–¥–∞–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ,–æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω
      const updateToken = await pool.query(
        `UPDATE family_users SET family_token=$1 WHERE id=$2`,
        [family_token, invitedUserId]
      );
      console.log(updateToken);
    } else {
      // –ï—Å–ª–∏ –Ω–µ—Ç,–¥–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –∏ —Å–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω
      const newFamilyUser = await pool.query(
        `INSERT INTO family_users (family_id,id,family_token) VALUES ($1,$2,$3)`,
        [familyIdCheck, invitedUserId, family_token]
      );

      console.log(`–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–≤–æ–º —á–ª–µ–Ω–µ —Å–µ–º—å–∏:${newFamilyUser}`);
    }

    // –û–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞
    let transporter = nodemailer.createTransport({
      service: 'gmail',
      auth: {
        user: 'testmyfamilyapp@gmail.com',
        pass: '55555abcd',
      },
      tls: {
        rejectUnauthorized: false,
      },
    });
    let info = await transporter.sendMail({
      from: '"Fred Foo üëª" <testmyfamilyapp@gmail.com>',
      to: req.body.email,
      subject: 'Do you want to join a family? ‚úî',
      text: 'Letter was sent',
      html: `<h3>Hello if you want to join this, follow  the <a href='http://localhost:3000/join?token=${family_token}'>link</a>`,
    });

    console.log('Preview URL: %s', nodemailer.getTestMessageUrl(info));

    res.json({ message: '–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≤–∞—à—É —Å–µ–º—å—é' });
  } catch (e) {
    console.log(e);
    res.status(500).json({ message: '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞,–ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ ' });
  }
});

// family/join
// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
router.post(`/join`, async (req, res) => {
  try {
    const familyToken = req.body.family_token;
    const userToken = req.body.token;

    const compareToken = await pool.query(
      `SELECT family_id,id FROM family_users WHERE family_token=$1`,
      [familyToken]
    );

    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π —Ç–æ–∫–µ–Ω

    if (compareToken.rows.length === 0) {
      return res.status(401).json({
        message:
          '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω,–ø–æ—Ä–ø–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. –í–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ —Å–µ–º—å–µ.',
      });
    }
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º ID —Å–µ–º—å–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    const decodeFamilyToken = jwt.decode(familyToken);
    console.log(decodeFamilyToken);
    const familyIdValue = decodeFamilyToken.obj;
    console.log(familyIdValue);

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    const decodeUserToken = jwt.decode(userToken);
    console.log(decodeUserToken);
    const userIdValue = decodeUserToken.user.id;
    console.log(userIdValue);

    // –ü—Ä–∏–Ω–∏–º–∞–µ–º —á—É–≤–∞–∫–∞ –≤ —Å–µ–º—å—é
    const adoptFamily = await pool.query(
      `UPDATE family_users SET family_token=${null} WHERE id=$1 AND family_id=$2 `,
      [userIdValue, familyIdValue]
    );
    console.log(adoptFamily);
    // –£–¥–∞–ª—è–µ–º —Å –±–∞–∑—ã –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è,–∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø—Ä–∏–Ω—è—Ç—ã
    const removeOtherFamily = await pool.query(
      `DELETE FROM family_users WHERE id=$1 AND family_token !=${null}`,
      [userIdValue]
    );
    console.log(removeOtherFamily);

    res
      .status(200)
      .json({ message: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–Ω—è–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ —Å–µ–º—å—é` });
  } catch (e) {
    console.log(e);
    res.status(500).json({ message: '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞,–ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞' });
  }
});

// family/show-family
// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å
router.get('/show-family', async (req, res) => {
  try {
    const userToken = req.query.token;
    const decodeUserId = jwt.decode(userToken);

    const userId = decodeUserId.user.id;
    // –ù–∞—Ö–æ–¥–∏–º ID —Å–µ–º—å–∏
    const familyId = await pool.query(
      `SELECT family_id FROM family_users WHERE id=$1`,
      [userId]
    );

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º familyId –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é  WHERE family_users.id=$1 AND family_token IS NULL
    const familyIdValue = familyId.rows[0].family_id;
    // –ù–∞—Ö–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–º—å–µ
    const familyMembers = await pool.query(
      `
    SELECT family_users.id,users.name,users.email, SUM(expenses.price) 
      FROM family_users 
      INNER JOIN users   
      ON family_users.id=users.id AND family_token IS NULL AND family_users.family_id=$1
      LEFT JOIN expenses ON expenses.id = family_users.id 
      GROUP BY family_users.id,users.name,users.email`,
      [familyIdValue]
    );
    console.log(familyMembers.rows);
    res.status(200).json(familyMembers.rows);
  } catch (e) {
    console.log(e);
    res.status(500).json({ message: '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞,–ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞' });
  }
});

module.exports = router;

// –∫–∞–∫ –º–µ–Ω—è—Ç—å —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö,—á—Ç–æ–±—ã –Ω–µ –∑–∞–±—ã—Ç—å
// ALTER TABLE family_users ALTER COLUMN family_id TYPE integer USING (family_id::integer);
