const { Router } = require('express');
const router = Router();
const pool = require('../db');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const jwtGenerator = require('../utils/jwtGenerator');
const { check, validationResult } = require('express-validator');
const nodemailer = require('nodemailer');
// const url = require('url');
// const querystring = require('querystring');

// /auth/register
// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
router.post(
  '/register',
  [
    check('email', '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email').isEmail(),
    check('password', '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è 6 —Å–∏–º–≤–æ–ª–æ–≤').isLength({
      min: 6,
    }),
  ],
  async (req, res) => {
    try {
      const errors = validationResult(req);
      if (!errors.isEmpty()) {
        return res.status(400).json({
          errors: errors.array(),
          message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
        });
      }
      //–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Ñ—Ä–æ–Ω—Ç–∞
      const { email, name, password } = req.body;
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å \
      const user = await pool.query('SELECT * FROM users WHERE email =$1', [
        email,
      ]);

      if (user.rows.length !== 0) {
        return res
          .status(401)
          .json({ message: '–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
      }

      // –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
      const saltRound = 10;
      const salt = await bcrypt.genSalt(saltRound);
      const bcryptPawword = await bcrypt.hash(password, salt);

      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      const newUser = await pool.query(
        'INSERT INTO users(email,name,password) VALUES($1, $2, $3) RETURNING *',
        [email, name, bcryptPawword]
      );

      //–°–æ–∑–¥–∞–µ–º jwt token
      const token = jwtGenerator(newUser.rows[0].id);
      res.json({ token });
    } catch (e) {
      console.log(e);
      res.status(500).json({ message: '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞,–ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞' });
    }
  }
);

// /auth/login
// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è

router.post('/login', async (req, res) => {
  try {
    console.log(req);
    //–ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ñ—Ä–æ–Ω—Ç–∞
    const { email, password } = req.body;
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º,—Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const user = await pool.query('SELECT * FROM users WHERE email =$1', [
      email,
    ]);
    if (user.rows.length === 0) {
      //–ó–Ω–∞—á–∏—Ç,—á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      return res.status(401).json({
        message: '–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç,–ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é',
      });
    }
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–∞—é—Ç –ª–∏ –ø–∞—Ä–æ–ª–∏
    const validPassword = await bcrypt.compare(password, user.rows[0].password);

    if (!validPassword) {
      return res.status(401).json('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
    }

    // –¢–æ–∫–µ–Ω –¥–ª—è –≤—Ö–æ–¥–∞
    const token = jwtGenerator(user.rows[0].id);

    res.json({ token });
    // res.header.json({token})
  } catch (e) {
    console.log(e);
    res.status(500).json({ message: '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞,–ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞' }, []);
  }
});

// /auth/forgotPassword
//–ó–∞–±—ã–ª –ø–∞—Ä–æ–ª—å
router.post('/forgot-password', async (req, res) => {
  try {
    //–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Ñ—Ä–æ–Ω—Ç–∞
    const { email } = req.body;
    // –ü—Ä–æ–≤—Ä–µ—è–µ–º –≤ –±–∞–∑–µ,–µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π —ç–º—ç–∏–ª
    const user = await pool.query('SELECT * FROM users WHERE email =$1', [
      email,
    ]);
    if (user.rows.length === 0) {
      return res
        .status(401)
        .json({ message: '–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
    }
    const token = jwtGenerator(user.rows[0].id);

    //–î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const newToken = await pool.query(
      `UPDATE users SET token = '${token}' WHERE email=$1`,
      [email]
    );
    console.log(newToken);
    // let testAccount = await nodemailer.createTestAccount();

    let transporter = nodemailer.createTransport({
      service: 'gmail',
      auth: {
        user: 'testmyfamilyapp@gmail.com',
        pass: '55555abcd',
      },
      tls: {
        rejectUnauthorized: false,
      },
    });

    // –û–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞
    let info = await transporter.sendMail({
      from: '"Fred Foo üëª" <testmyfamilyapp@gmail.com>',
      to: req.body.email,
      subject: 'Do you want to change password? ‚úî',
      text: 'Letter was sent',
      html: `<h3>Hello if you want to change password, follow  the <a href='http://localhost:3000/reset-password?token=${token}'>link</a>`,
    });

    console.log('Preview URL: %s', nodemailer.getTestMessageUrl(info));
    res.json({ status: 200 });
  } catch (e) {
    console.log(e);
    res.status(500).json({ message: '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞,–ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞' });
  }
});

// /auth/resetPassword
// –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è
router.post('/reset-password', async (req, res) => {
  try {
    //–ë–µ—Ä–µ–º —Ç–æ–∫–µ–Ω —Å —Ñ—Ä–æ–Ω—Ç–∞
    const sentToken = req.body.token;

    const compareToken = await pool.query(
      `SELECT * FROM users WHERE token=$1`,
      [sentToken]
    );
    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π —Ç–æ–∫–µ–Ω

    if (compareToken.rows.length === 0) {
      return res
        .status(401)
        .json({ message: '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω,–ø–æ—Ä–ø–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞' });
    }
    const decodeToken = jwt.decode(sentToken);
    console.log(decodeToken.user.id); // –î–µ–∫–æ–¥–∏—É—Ä–µ–º —Ç–æ–∫–µ–Ω,–ø–æ–ª—É—á–∞–µ–º –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    // –ú–µ–Ω—è–µ–º –ø–∞—Ä–æ–ª—å –≤ –±–∞–∑–µ
    //–ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å —Å —Ñ—Ä–æ–Ω—Ç–∞
    const newPassword = req.body.password;
    // –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
    const saltRound = 10;
    const salt = await bcrypt.genSalt(saltRound);
    const bcryptNewPassword = await bcrypt.hash(newPassword, salt);
    //–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è
    const changePassword = await pool.query(
      `UPDATE users SET password = '${bcryptNewPassword}' WHERE id=${decodeToken.user.id}`
      // [decodeToken.user.id]
    );
    console.log(changePassword, '–í–∞—à –ø–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω');
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ –æ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è
    const userEmail = await pool.query(
      `SELECT email FROM users WHERE id=${decodeToken.user.id}`
    );

    let transporter = nodemailer.createTransport({
      service: 'gmail',
      auth: {
        user: 'testmyfamilyapp@gmail.com',
        pass: '55555abcd',
      },
      tls: {
        rejectUnauthorized: false,
      },
    });

    let info = await transporter.sendMail({
      from: '"Fred Foo üëª" <testmyfamilyapp@gmail.com>',
      to: userEmail.rows[0].email,
      subject: 'Your password has updated ‚úî',
      text: 'Letter was sent',
      html: `<h1>–í–∞—à –ø–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω</h1>`,
    });

    console.log('Preview URL: %s', nodemailer.getTestMessageUrl(info));

    // –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω –Ω–∞ –∑–∞–º–µ–Ω—É –ø–∞—Ä–æ–ª—è
    const deleteToken = await pool.query(
      `UPDATE users SET token=${null} WHERE token=$1`,
      [sentToken]
    );

    console.log(deleteToken, '–¢–æ–∫–µ–Ω —Å—Ç—ë—Ä—Ç');

    return res.status(200).json({ message: '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω' });
  } catch (e) {
    console.log(e);
    res.status(500).json({ message: '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞,–ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞' });
  }
});

// /auth/user-info
// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
router.get(`/userinfo`, async (req, res) => {
  try {
    const sentToken = req.query.token;

    const decodeToken = jwt.decode(sentToken);
    console.log(decodeToken);
    const userID = decodeToken.user.id;
    console.log(userID);
    const findUser = await pool.query(
      `SELECT users.id,users.email,users.name,family_users.family_id FROM users LEFT JOIN family_users ON users.id=family_users.id AND family_token IS NULL WHERE users.id=$1 `,
      [userID]
    );
    console.log(findUser.rows);
    // const showInfo = findUser.rows;
    // console.log('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', showInfo);
    res.status(200).json(findUser.rows[0]);
  } catch (e) {
    console.log(e);
    res.status(500).json({ message: '–Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü' });
  }
});

// /auth/changedata
// –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è
router.post('/change-data', async (req, res) => {
  try {
    //–ë–µ—Ä–µ–º —Ç–æ–∫–µ–Ω —Å —Ñ—Ä–æ–Ω—Ç–∞
    const sentToken = req.body.token;
    const decodeToken = jwt.decode(sentToken);
    console.log(decodeToken.user.id); // –î–µ–∫–æ–¥–∏—É—Ä–µ–º —Ç–æ–∫–µ–Ω,–ø–æ–ª—É—á–∞–µ–º –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userIdValue = decodeToken.user.id;
    const { email, name,password, newPassword } = req.body;
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å 
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,–∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—Ç —Å–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å 
    const user = await pool.query('SELECT * FROM users WHERE id=$1', [
      userIdValue
    ]);
    if (user.rows.length === 0) {
      //–ó–Ω–∞—á–∏—Ç,—á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      return res.status(401).json({
        message: '–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç,–ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é',
      });
    }
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–∞—é—Ç –ª–∏ –ø–∞—Ä–æ–ª–∏
    const validPassword = await bcrypt.compare(password, user.rows[0].password);

    if (!validPassword) {
      return res.status(401).json({message:`–î–ª—è —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è,–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å`});
    }
    // –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
    const saltRound = 10;
    const salt = await bcrypt.genSalt(saltRound);
    const bcryptNewPassword = await bcrypt.hash(newPassword, salt);
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const changeData = await pool.query(
      `UPDATE users 
      SET email=$1,name=$2,password=$3 WHERE id=$4 `,
      [email, name, bcryptNewPassword, userIdValue]
    );
   
    console.log(changeData)

    return res.status(200).json({ message: '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã' });
  } catch (e) {
    console.log(e);
    res.status(500).json({ message: '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞,–ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞' });
  }
});

module.exports = router;
